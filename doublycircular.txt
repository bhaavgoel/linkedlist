#include <stdio.h>
#include <stdlib.h>

// Structure for doubly circular linked list node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

// Function to insert a node at the end of a doubly circular linked list
void insertAtEnd(struct Node** head, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head;

    new_node->data = new_data;
    new_node->next = *head;

    // If the list is empty, make the new node the head and point to itself
    if (*head == NULL) {
        *head = new_node;
        new_node->prev = *head;
        return;
    }

    // Otherwise, traverse to the last node
    while (last->next != *head) {
        last = last->next;
    }

    last->next = new_node;
    new_node->prev = last;
}

// Function to print the doubly circular linked list in forward direction
void printList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    do {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

// Main function for Doubly Circular Linked List
int main() {
    struct Node* head = NULL;

    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    
    printf("Doubly Circular Linked List: ");
    printList(head);

    return 0;
}
#doublycircular works, checked.
