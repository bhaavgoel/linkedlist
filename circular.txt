#include <stdio.h>
#include <stdlib.h>

// Structure for singly circular linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a node at the end of a circular linked list
void insertAtEnd(struct Node** head, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* temp = *head;
    
    new_node->data = new_data;
    new_node->next = *head;

    // If the list is empty, make the new node the head and point to itself
    if (*head == NULL) {
        *head = new_node;
        new_node->next = *head;
    } else {
        // Traverse to the last node
        while (temp->next != *head) {
            temp = temp->next;
        }
        temp->next = new_node;
    }
}

// Function to print the circular linked list
void printList(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }

    struct Node* temp = head;
    do {
        printf("%d -> ", temp->data);
        temp = temp->next;
    } while (temp != head);
    printf("(back to head)\n");
}

// Main function for Circular Linked List
int main() {
    struct Node* head = NULL;

    insertAtEnd(&head, 10);
    insertAtEnd(&head, 20);
    insertAtEnd(&head, 30);
    
    printf("Singly Circular Linked List: ");
    printList(head);

    return 0;
}
#tested cicular linked list.
